<!DOCTYPE html>
<html lang="en">

<head>
  <script src="//cdn.jsdelivr.net/npm/phaser@3.20.1/dist/phaser.min.js"></script>
</head>

<body>
  <script>
    var GameScene = new Phaser.Class({

      Extends: Phaser.Scene,

      initialize:

        function GameScene() {
          Phaser.Scene.call(this, { key: 'gameScene', active: true });

          this.score = 0;
          this.scoreText = null;
          this.player = null;
          this.mouse = null;

          this.speed = 1;
          this.targetX = 100;
          this.targetY = 300;
        },

      preload: function () {
        this.load.image('sky', './images/panda/sky.png');
        this.load.image('ground', './images/panda/platform.png');
        this.load.image('star', './images/panda/star.png');
        this.load.image('bomb', './images/panda/bomb.png');
        this.load.spritesheet('panda', './images/panda/panda.png', { frameWidth: 100, frameHeight: 184 });
      },

      create: function () {
        this.add.image(400, 300, 'sky');
        var platforms = this.physics.add.staticGroup();
        platforms.create(400, 568, 'ground').setScale(2).refreshBody();

        var player = this.physics.add.sprite(this.targetX, this.targetY, 'panda');
        player.setBounce(0.2);
        player.setCollideWorldBounds(true);
        player.setInteractive();
        player.on('pointerdown', this.clickDude, this)

        this.anims.create({
          key: 'left',
          frames: this.anims.generateFrameNumbers('panda', { start: 0, end: 4 }),
          frameRate: 10,
          repeat: -1
        });

        this.anims.create({
          key: 'turn',
          frames: [{ key: 'panda', frame: 5 }],
          frameRate: 20
        });

        this.anims.create({
          key: 'right',
          frames: this.anims.generateFrameNumbers('panda', { start: 5, end: 9 }),
          frameRate: 10,
          repeat: -1
        });

        this.input.mouse.capture = true;
        this.input.on('pointerdown', this.moveDude, this)

        var stars = this.physics.add.group({
          key: 'star',
          repeat: 11,
          setXY: { x: 12, y: 0, stepX: 70 }
        });

        stars.children.iterate(function (child) {
          child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
        });

        this.scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

        this.physics.add.collider(player, platforms);
        this.physics.add.collider(stars, platforms);
        this.physics.add.overlap(player, stars, this.collectStar, null, this);

        this.player = player;
      },

      update: function () {
        var player = this.player;

        if (Math.floor(this.targetX) - Math.floor(player.x) > 5) {
          player.setVelocityX(100);
          player.anims.play('right', true);
        } else if (Math.floor(player.x) - Math.floor(this.targetX) > 5) {
          player.setVelocityX(-100);
          player.anims.play('left', true);
        } else {
          player.setVelocityX(0);
          player.anims.play('turn');
        }

      },

      collectStar: function (player, star) {
        star.disableBody(true, true);

        this.score += 10;
        this.scoreText.setText('Score: ' + this.score);
      },

      clickDude: function () {
        console.log('clickDude')
      },

      moveDude: function () {
        this.targetX = this.input.x
        this.targetY = this.input.y
      }
    });


    var config = {
      type: Phaser.AUTO,
      scale: {
        mode: Phaser.Scale.FIT,
        parent: 'phaser-example',
        autoCenter: Phaser.Scale.CENTER_BOTH,
        width: 800,
        height: 600
      },
      physics: {
        default: 'arcade',
        arcade: {
          gravity: { y: 300 },
          debug: false
        }
      },
      scene: GameScene
    };

    var game = new Phaser.Game(config);

  </script>
</body>



</html>